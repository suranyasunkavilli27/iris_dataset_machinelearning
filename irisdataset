#check the versions of all libraries
import sys
print("python: {}".format(sys.version))
import scipy
print("scipy: {}".format(scipy.__version__))   
import numpy
print("numpy: {}".format(numpy.__version__))  
import matplotlib
print("matplotlib: {}".format(matplotlib.__version__)) 
import pandas
print("pandas: {}".format(pandas.__version__)) 
import sklearn
print("sklearn: {}".format(sklearn.__version__)) 

#loading libraries
import pandas
from pandas.plotting import scatter_matrix #a kind of scattering plot
import matplotlib as plt
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC


url = "http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
names = ['sepal-length', 'sepal-width', 'petal-lenght', 'petal-width', 'class']
dataset = pandas.read_csv(url, names = names)

print(dataset.shape) # gives no of rows and cols
print(dataset.head(30)) # gives first 30 data
print(dataset.describe()) # gives count ,mean, std, min, 25%, 50%, 75% 
print(dataset.groupby('class').size())





dataset.plot(kind = 'box',subplots = true, layout = (2,2) , sharex = false, sharey = false)
plt.show()

#histogram
dataset.hist()
plt.show()


#scatter plot
scatter_matrix(dataset)
plt.show()

array = dataset.values
x = array[:,0:4]
y = array[:,4]
validation_size = 0.20
seed = 6;
x_train, x_test, y_train, y_test = model_selection.train_test_split(x,y, test_size = validation_size, random_state = seed)


seed = 6
scoring = 'accuracy'

#each model
models = []
models.append(('LR', LogisticRegression()))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB))
models.append(('SVM', SVC()))



#evaluating each model
results = []
names = []
for name, model in models:
    kfold = model_selection.KFold(n_splits = 10, random_state = seed)
    cv_results = model_selection.cross_val_score(model, x_train, y_train,cv = kfold,scoring = scoring)
    results.append(cv_results)
    names.append(name);
    msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
    print(msg)
